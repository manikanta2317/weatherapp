{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\manik\\\\Downloads\\\\weather-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst weatherIcons = {\n  0: '☀️',\n  1: '🌤️',\n  2: '⛅',\n  3: '☁️',\n  45: '🌫️',\n  48: '🌫️',\n  51: '🌦️',\n  61: '🌧️',\n  71: '❄️',\n  80: '🌧️',\n  95: '⛈️'\n};\nfunction App() {\n  _s();\n  const [city, setCity] = useState('');\n  const [locationName, setLocationName] = useState('');\n  const [weather, setWeather] = useState(null);\n  const [forecast, setForecast] = useState([]);\n  const fetchWeather = async (lat, lon, cityName) => {\n    const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true&daily=temperature_2m_max,temperature_2m_min,weathercode&timezone=auto`;\n    const res = await fetch(url);\n    const data = await res.json();\n    setWeather(data.current_weather);\n    setForecast(data.daily);\n    setLocationName(cityName);\n  };\n  const handleSearch = async () => {\n    if (!city) return;\n    const geoUrl = `https://geocoding-api.open-meteo.com/v1/search?name=${city}&count=1`;\n    const res = await fetch(geoUrl);\n    const data = await res.json();\n    if (data.results && data.results.length > 0) {\n      const {\n        latitude,\n        longitude,\n        name,\n        country\n      } = data.results[0];\n      fetchWeather(latitude, longitude, `${name}, ${country}`);\n    }\n  };\n  const handleCurrentLocation = () => {\n    navigator.geolocation.getCurrentPosition(pos => {\n      fetchWeather(pos.coords.latitude, pos.coords.longitude, 'My Location');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uD83C\\uDF24 Weather App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter city\",\n        value: city,\n        onChange: e => setCity(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCurrentLocation,\n        children: \"\\uD83D\\uDCCD My Location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), weather && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Current Weather \", locationName && `in ${locationName}`]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: '2rem'\n        },\n        children: weatherIcons[weather.weathercode] || '❔'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Temperature: \", weather.temperature, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Windspeed: \", weather.windspeed, \" km/h\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this), forecast.time && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"5-Day Forecast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forecast-container\",\n        children: forecast.time.slice(1, 6).map((day, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: day\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '1.5rem'\n            },\n            children: weatherIcons[forecast.weathercode[idx + 1]] || '❔'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [forecast.temperature_2m_min[idx + 1], \"\\xB0C / \", forecast.temperature_2m_max[idx + 1], \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 17\n          }, this)]\n        }, day, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"I5O6u+gJOyG0OeYpclqKRrVVMoQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","weatherIcons","App","_s","city","setCity","locationName","setLocationName","weather","setWeather","forecast","setForecast","fetchWeather","lat","lon","cityName","url","res","fetch","data","json","current_weather","daily","handleSearch","geoUrl","results","length","latitude","longitude","name","country","handleCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","style","fontSize","weathercode","temperature","windspeed","time","slice","map","day","idx","temperature_2m_min","temperature_2m_max","_c","$RefreshReg$"],"sources":["C:/Users/manik/Downloads/weather-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst weatherIcons = {\n  0: '☀️',\n  1: '🌤️',\n  2: '⛅',\n  3: '☁️',\n  45: '🌫️',\n  48: '🌫️',\n  51: '🌦️',\n  61: '🌧️',\n  71: '❄️',\n  80: '🌧️',\n  95: '⛈️'\n};\n\nfunction App() {\n  const [city, setCity] = useState('');\n  const [locationName, setLocationName] = useState('');\n  const [weather, setWeather] = useState(null);\n  const [forecast, setForecast] = useState([]);\n\n  const fetchWeather = async (lat, lon, cityName) => {\n    const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true&daily=temperature_2m_max,temperature_2m_min,weathercode&timezone=auto`;\n    const res = await fetch(url);\n    const data = await res.json();\n    setWeather(data.current_weather);\n    setForecast(data.daily);\n    setLocationName(cityName);\n  };\n\n  const handleSearch = async () => {\n    if (!city) return;\n    const geoUrl = `https://geocoding-api.open-meteo.com/v1/search?name=${city}&count=1`;\n    const res = await fetch(geoUrl);\n    const data = await res.json();\n    if (data.results && data.results.length > 0) {\n      const { latitude, longitude, name, country } = data.results[0];\n      fetchWeather(latitude, longitude, `${name}, ${country}`);\n    }\n  };\n\n  const handleCurrentLocation = () => {\n    navigator.geolocation.getCurrentPosition((pos) => {\n      fetchWeather(pos.coords.latitude, pos.coords.longitude, 'My Location');\n    });\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>🌤 Weather App</h1>\n      <div>\n        <input \n          type=\"text\" \n          placeholder=\"Enter city\" \n          value={city} \n          onChange={(e) => setCity(e.target.value)} \n        />\n        <button onClick={handleSearch}>Search</button>\n        <button onClick={handleCurrentLocation}>📍 My Location</button>\n      </div>\n\n      {weather && (\n        <div className=\"weather-card\">\n          <h2>Current Weather {locationName && `in ${locationName}`}</h2>\n          <div style={{ fontSize: '2rem' }}>\n            {weatherIcons[weather.weathercode] || '❔'}\n          </div>\n          <p>Temperature: {weather.temperature}°C</p>\n          <p>Windspeed: {weather.windspeed} km/h</p>\n        </div>\n      )}\n\n      {forecast.time && (\n        <div>\n          <h2>5-Day Forecast</h2>\n          <div className=\"forecast-container\">\n            {forecast.time.slice(1, 6).map((day, idx) => (\n              <div key={day} className=\"forecast-card\">\n                <p>{day}</p>\n                <div style={{ fontSize: '1.5rem' }}>\n                  {weatherIcons[forecast.weathercode[idx + 1]] || '❔'}\n                </div>\n                <p>\n                  {forecast.temperature_2m_min[idx + 1]}°C / {forecast.temperature_2m_max[idx + 1]}°C\n                </p>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}