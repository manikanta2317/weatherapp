{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\manik\\\\Downloads\\\\weather-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst weatherIcons = {\n  0: '‚òÄÔ∏è',\n  1: 'üå§Ô∏è',\n  2: '‚õÖ',\n  3: '‚òÅÔ∏è',\n  45: 'üå´Ô∏è',\n  48: 'üå´Ô∏è',\n  51: 'üå¶Ô∏è',\n  53: 'üå¶Ô∏è',\n  55: 'üåßÔ∏è',\n  56: 'üåßÔ∏è',\n  57: 'üåßÔ∏è',\n  61: 'üåßÔ∏è',\n  63: 'üåßÔ∏è',\n  65: 'üåßÔ∏è',\n  66: 'üåßÔ∏è',\n  67: 'üåßÔ∏è',\n  71: '‚ùÑÔ∏è',\n  73: '‚ùÑÔ∏è',\n  75: '‚ùÑÔ∏è',\n  77: '‚ùÑÔ∏è',\n  80: 'üåßÔ∏è',\n  81: 'üåßÔ∏è',\n  82: 'üåßÔ∏è',\n  85: '‚ùÑÔ∏è',\n  86: '‚ùÑÔ∏è',\n  95: '‚õàÔ∏è',\n  96: '‚õàÔ∏è',\n  99: '‚õàÔ∏è'\n};\nfunction App() {\n  _s();\n  const [city, setCity] = useState('');\n  const [weather, setWeather] = useState(null);\n  const [forecast, setForecast] = useState([]);\n  const [cityName, setCityName] = useState('');\n  const [hourly, setHourly] = useState({\n    time: [],\n    temperature: [],\n    code: []\n  });\n  const [selectedDay, setSelectedDay] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    handleCurrentLocation();\n  }, []);\n  const fetchWeather = async (lat, lon, name = '') => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Step 1: Get the exact timezone name for the location\n      const timezoneUrl = `https://api.ipgeolocation.io/timezone?lat=${lat}&long=${lon}`;\n      const timezoneRes = await fetch(timezoneUrl);\n      const timezoneData = await timezoneRes.json();\n      const timezoneName = timezoneData.timezone;\n\n      // Step 2: Use the explicit timezone in the weather API call\n      const weatherUrl = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true&hourly=temperature_2m,weathercode&daily=temperature_2m_max,temperature_2m_min,weathercode&timezone=${timezoneName}`;\n      const weatherRes = await fetch(weatherUrl);\n      if (!weatherRes.ok) {\n        throw new Error('Failed to fetch weather data.');\n      }\n      const weatherData = await weatherRes.json();\n      setWeather(weatherData.current_weather);\n      setForecast(weatherData.daily);\n      setCityName(name);\n      setHourly({\n        time: weatherData.hourly.time,\n        temperature: weatherData.hourly.temperature_2m,\n        code: weatherData.hourly.weathercode\n      });\n      if (weatherData.daily.time && weatherData.daily.time.length > 0) {\n        // Find the correct starting day based on the current date\n        const todayStr = new Date().toISOString().split('T')[0];\n        const todayIndex = weatherData.daily.time.indexOf(todayStr);\n        if (todayIndex !== -1) {\n          setSelectedDay(weatherData.daily.time[todayIndex]);\n        } else {\n          // Fallback to the first day of the forecast if today's date isn't found\n          setSelectedDay(weatherData.daily.time[0]);\n        }\n      }\n    } catch (err) {\n      console.error(\"Weather fetching error:\", err);\n      setError(\"Failed to get weather data. Please try again later.\");\n      setWeather(null);\n      setForecast([]);\n      setHourly({\n        time: [],\n        temperature: [],\n        code: []\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleSearch = async e => {\n    e.preventDefault();\n    if (!city) return;\n    setLoading(true);\n    setError(null);\n    try {\n      const geoUrl = `https://geocoding-api.open-meteo.com/v1/search?name=${city}&count=1`;\n      const res = await fetch(geoUrl);\n      const data = await res.json();\n      if (data.results && data.results.length > 0) {\n        const {\n          latitude,\n          longitude,\n          name\n        } = data.results[0];\n        fetchWeather(latitude, longitude, name);\n      } else {\n        setError(\"City not found. Please try another search.\");\n        setLoading(false);\n      }\n    } catch (err) {\n      console.error(\"Geocoding error:\", err);\n      setError(\"Failed to find city. Please check your spelling.\");\n      setLoading(false);\n    }\n  };\n  const handleCurrentLocation = () => {\n    if (navigator.geolocation) {\n      setLoading(true);\n      setError(null);\n      navigator.geolocation.getCurrentPosition(pos => {\n        fetchWeather(pos.coords.latitude, pos.coords.longitude, 'My Location');\n      }, error => {\n        console.error(\"Geolocation error:\", error);\n        setError(\"Unable to retrieve your location. Please enter a city manually.\");\n        setLoading(false);\n      });\n    } else {\n      setError(\"Geolocation is not supported by your browser.\");\n    }\n  };\n  const getDisplayDayName = (dateStr, index) => {\n    const d = new Date(dateStr);\n    const dayName = d.toLocaleDateString('en-US', {\n      weekday: 'long'\n    });\n    const formattedDate = d.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n    if (index === 0) return `Today, ${formattedDate}`;\n    return `${dayName}, ${formattedDate}`;\n  };\n  const getHourlyForDay = dateStr => {\n    return hourly.time.map((t, i) => ({\n      time: t,\n      temp: hourly.temperature[i],\n      code: hourly.code[i]\n    })).filter(h => h.time.startsWith(dateStr));\n  };\n  const getFiveDayForecast = () => {\n    if (!forecast.time || forecast.time.length === 0) {\n      return [];\n    }\n    const todayStr = new Date().toISOString().split('T')[0];\n    const startIndex = forecast.time.indexOf(todayStr);\n    if (startIndex === -1 || startIndex > forecast.time.length - 5) {\n      return forecast.time.slice(0, 5);\n    }\n    return forecast.time.slice(startIndex, startIndex + 5);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"app-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"\\uD83C\\uDF24\\uFE0F Weather App\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSearch,\n          className: \"search-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter city\",\n            value: city,\n            onChange: e => setCity(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: handleCurrentLocation,\n            children: \"\\uD83D\\uDCCD My Location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status-message\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 21\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status-message error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 19\n      }, this), !loading && !error && weather && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-weather\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Current Weather in \", cityName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weather-main-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"weather-icon\",\n            children: weatherIcons[weather.weathercode] || '‚ùî'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"weather-details\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"temperature\",\n              children: [weather.temperature, \"\\xB0C\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Windspeed: \", weather.windspeed, \" km/h\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this), !loading && !error && forecast.time && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forecast-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"5-Day Forecast\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast-container\",\n          children: getFiveDayForecast().map((day, idx) => {\n            const dayIndexInForecast = forecast.time.indexOf(day);\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `forecast-card ${selectedDay === day ? 'selected' : ''}`,\n              onClick: () => setSelectedDay(day),\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"day-name\",\n                children: getDisplayDayName(day, idx)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"day-icon\",\n                children: weatherIcons[forecast.weathercode[dayIndexInForecast]] || '‚ùî'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"temp-range\",\n                children: [Math.round(forecast.temperature_2m_min[dayIndexInForecast]), \"\\xB0C / \", Math.round(forecast.temperature_2m_max[dayIndexInForecast]), \"\\xB0C\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 21\n              }, this)]\n            }, day, true, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this), !loading && !error && selectedDay && hourly.time.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hourly-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Hourly Forecast for \", getDisplayDayName(selectedDay, getFiveDayForecast().indexOf(selectedDay))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hourly-container\",\n          children: getHourlyForDay(selectedDay).map((h, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hourly-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"hourly-time\",\n              children: [new Date(h.time).getHours(), \":00\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"hourly-icon\",\n              children: weatherIcons[h.code] || '‚ùî'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"hourly-temp\",\n              children: [Math.round(h.temp), \"\\xB0C\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 19\n            }, this)]\n          }, idx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }, this), !loading && !error && !weather && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"welcome-message\",\n        children: \"Search for a city or use your current location to get the weather forecast.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"zuvN0z6HvL024Fek2cX+yI521gI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","weatherIcons","App","_s","city","setCity","weather","setWeather","forecast","setForecast","cityName","setCityName","hourly","setHourly","time","temperature","code","selectedDay","setSelectedDay","loading","setLoading","error","setError","handleCurrentLocation","fetchWeather","lat","lon","name","timezoneUrl","timezoneRes","fetch","timezoneData","json","timezoneName","timezone","weatherUrl","weatherRes","ok","Error","weatherData","current_weather","daily","temperature_2m","weathercode","length","todayStr","Date","toISOString","split","todayIndex","indexOf","err","console","handleSearch","e","preventDefault","geoUrl","res","data","results","latitude","longitude","navigator","geolocation","getCurrentPosition","pos","coords","getDisplayDayName","dateStr","index","d","dayName","toLocaleDateString","weekday","formattedDate","month","day","getHourlyForDay","map","t","i","temp","filter","h","startsWith","getFiveDayForecast","startIndex","slice","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","onClick","windspeed","idx","dayIndexInForecast","Math","round","temperature_2m_min","temperature_2m_max","getHours","_c","$RefreshReg$"],"sources":["C:/Users/manik/Downloads/weather-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nconst weatherIcons = {\n  0: '‚òÄÔ∏è', 1: 'üå§Ô∏è', 2: '‚õÖ', 3: '‚òÅÔ∏è',\n  45: 'üå´Ô∏è', 48: 'üå´Ô∏è',\n  51: 'üå¶Ô∏è', 53: 'üå¶Ô∏è', 55: 'üåßÔ∏è',\n  56: 'üåßÔ∏è', 57: 'üåßÔ∏è',\n  61: 'üåßÔ∏è', 63: 'üåßÔ∏è', 65: 'üåßÔ∏è',\n  66: 'üåßÔ∏è', 67: 'üåßÔ∏è',\n  71: '‚ùÑÔ∏è', 73: '‚ùÑÔ∏è', 75: '‚ùÑÔ∏è', 77: '‚ùÑÔ∏è',\n  80: 'üåßÔ∏è', 81: 'üåßÔ∏è', 82: 'üåßÔ∏è',\n  85: '‚ùÑÔ∏è', 86: '‚ùÑÔ∏è',\n  95: '‚õàÔ∏è', 96: '‚õàÔ∏è', 99: '‚õàÔ∏è'\n};\n\nfunction App() {\n  const [city, setCity] = useState('');\n  const [weather, setWeather] = useState(null);\n  const [forecast, setForecast] = useState([]);\n  const [cityName, setCityName] = useState('');\n  const [hourly, setHourly] = useState({ time: [], temperature: [], code: [] });\n  const [selectedDay, setSelectedDay] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    handleCurrentLocation();\n  }, []);\n\n  const fetchWeather = async (lat, lon, name = '') => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Step 1: Get the exact timezone name for the location\n      const timezoneUrl = `https://api.ipgeolocation.io/timezone?lat=${lat}&long=${lon}`;\n      const timezoneRes = await fetch(timezoneUrl);\n      const timezoneData = await timezoneRes.json();\n      const timezoneName = timezoneData.timezone;\n\n      // Step 2: Use the explicit timezone in the weather API call\n      const weatherUrl = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true&hourly=temperature_2m,weathercode&daily=temperature_2m_max,temperature_2m_min,weathercode&timezone=${timezoneName}`;\n      const weatherRes = await fetch(weatherUrl);\n      if (!weatherRes.ok) {\n        throw new Error('Failed to fetch weather data.');\n      }\n      const weatherData = await weatherRes.json();\n\n      setWeather(weatherData.current_weather);\n      setForecast(weatherData.daily);\n      setCityName(name);\n\n      setHourly({\n        time: weatherData.hourly.time,\n        temperature: weatherData.hourly.temperature_2m,\n        code: weatherData.hourly.weathercode\n      });\n      \n      if (weatherData.daily.time && weatherData.daily.time.length > 0) {\n        // Find the correct starting day based on the current date\n        const todayStr = new Date().toISOString().split('T')[0];\n        const todayIndex = weatherData.daily.time.indexOf(todayStr);\n        if (todayIndex !== -1) {\n          setSelectedDay(weatherData.daily.time[todayIndex]);\n        } else {\n          // Fallback to the first day of the forecast if today's date isn't found\n          setSelectedDay(weatherData.daily.time[0]);\n        }\n      }\n\n    } catch (err) {\n      console.error(\"Weather fetching error:\", err);\n      setError(\"Failed to get weather data. Please try again later.\");\n      setWeather(null);\n      setForecast([]);\n      setHourly({ time: [], temperature: [], code: [] });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSearch = async (e) => {\n    e.preventDefault();\n    if (!city) return;\n\n    setLoading(true);\n    setError(null);\n    try {\n      const geoUrl = `https://geocoding-api.open-meteo.com/v1/search?name=${city}&count=1`;\n      const res = await fetch(geoUrl);\n      const data = await res.json();\n      if (data.results && data.results.length > 0) {\n        const { latitude, longitude, name } = data.results[0];\n        fetchWeather(latitude, longitude, name);\n      } else {\n        setError(\"City not found. Please try another search.\");\n        setLoading(false);\n      }\n    } catch (err) {\n      console.error(\"Geocoding error:\", err);\n      setError(\"Failed to find city. Please check your spelling.\");\n      setLoading(false);\n    }\n  };\n\n  const handleCurrentLocation = () => {\n    if (navigator.geolocation) {\n      setLoading(true);\n      setError(null);\n      navigator.geolocation.getCurrentPosition(\n        (pos) => {\n          fetchWeather(pos.coords.latitude, pos.coords.longitude, 'My Location');\n        },\n        (error) => {\n          console.error(\"Geolocation error:\", error);\n          setError(\"Unable to retrieve your location. Please enter a city manually.\");\n          setLoading(false);\n        }\n      );\n    } else {\n      setError(\"Geolocation is not supported by your browser.\");\n    }\n  };\n  \n  const getDisplayDayName = (dateStr, index) => {\n    const d = new Date(dateStr);\n    const dayName = d.toLocaleDateString('en-US', { weekday: 'long' });\n    const formattedDate = d.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    \n    if (index === 0) return `Today, ${formattedDate}`;\n    return `${dayName}, ${formattedDate}`;\n  };\n\n  const getHourlyForDay = (dateStr) => {\n    return hourly.time\n      .map((t, i) => ({ time: t, temp: hourly.temperature[i], code: hourly.code[i] }))\n      .filter((h) => h.time.startsWith(dateStr));\n  };\n\n  const getFiveDayForecast = () => {\n    if (!forecast.time || forecast.time.length === 0) {\n      return [];\n    }\n    const todayStr = new Date().toISOString().split('T')[0];\n    const startIndex = forecast.time.indexOf(todayStr);\n\n    if (startIndex === -1 || startIndex > forecast.time.length - 5) {\n      return forecast.time.slice(0, 5);\n    }\n    return forecast.time.slice(startIndex, startIndex + 5);\n  };\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"app\">\n        <header className=\"app-header\">\n          <h1>üå§Ô∏è Weather App</h1>\n          <form onSubmit={handleSearch} className=\"search-form\">\n            <input\n              type=\"text\"\n              placeholder=\"Enter city\"\n              value={city}\n              onChange={(e) => setCity(e.target.value)}\n            />\n            <button type=\"submit\">Search</button>\n            <button type=\"button\" onClick={handleCurrentLocation}>üìç My Location</button>\n          </form>\n        </header>\n\n        {loading && <p className=\"status-message\">Loading...</p>}\n        {error && <p className=\"status-message error-message\">{error}</p>}\n\n        {!loading && !error && weather && (\n          <div className=\"current-weather\">\n            <h2>Current Weather in {cityName}</h2>\n            <div className=\"weather-main-info\">\n              <div className=\"weather-icon\">\n                {weatherIcons[weather.weathercode] || '‚ùî'}\n              </div>\n              <div className=\"weather-details\">\n                <p className=\"temperature\">{weather.temperature}¬∞C</p>\n                <p>Windspeed: {weather.windspeed} km/h</p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {!loading && !error && forecast.time && (\n          <div className=\"forecast-section\">\n            <h2>5-Day Forecast</h2>\n            <div className=\"forecast-container\">\n              {getFiveDayForecast().map((day, idx) => {\n                const dayIndexInForecast = forecast.time.indexOf(day);\n                return (\n                  <div\n                    key={day}\n                    className={`forecast-card ${selectedDay === day ? 'selected' : ''}`}\n                    onClick={() => setSelectedDay(day)}\n                  >\n                    <p className=\"day-name\">{getDisplayDayName(day, idx)}</p>\n                    <div className=\"day-icon\">\n                      {weatherIcons[forecast.weathercode[dayIndexInForecast]] || '‚ùî'}\n                    </div>\n                    <p className=\"temp-range\">\n                      {Math.round(forecast.temperature_2m_min[dayIndexInForecast])}¬∞C / {Math.round(forecast.temperature_2m_max[dayIndexInForecast])}¬∞C\n                    </p>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n\n        {!loading && !error && selectedDay && hourly.time.length > 0 && (\n          <div className=\"hourly-section\">\n            <h2>Hourly Forecast for {getDisplayDayName(selectedDay, getFiveDayForecast().indexOf(selectedDay))}</h2>\n            <div className=\"hourly-container\">\n              {getHourlyForDay(selectedDay).map((h, idx) => (\n                <div key={idx} className=\"hourly-card\">\n                  <p className=\"hourly-time\">{new Date(h.time).getHours()}:00</p>\n                  <div className=\"hourly-icon\">\n                    {weatherIcons[h.code] || '‚ùî'}\n                  </div>\n                  <p className=\"hourly-temp\">{Math.round(h.temp)}¬∞C</p>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {!loading && !error && !weather && (\n          <p className=\"welcome-message\">Search for a city or use your current location to get the weather forecast.</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}